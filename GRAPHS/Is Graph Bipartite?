class Solution {
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int[] colors= new int[n];
        for(int i=0; i<n; i++){
            if(colors[i]==0){
                if(!bfs(graph,i,colors)){
                    return false;
                }
            }
        }
        return true;
    }
    private boolean bfs(int[][] graph, int start, int[] colors){
        Queue<Integer> queue= new ArrayDeque<>();
        queue.offer(start);
        colors[start]=1;
           
        while(!queue.isEmpty()){
            int node=queue.poll();
                int currentColor=colors[node];
            for(int neighbor: graph[node]){
                if(colors[neighbor]==currentColor){
                    return false;
                }
                if(colors[neighbor]==0){
                    colors[neighbor]= -currentColor;
                    queue.offer(neighbor);
                }
            }

        }
      return true;
    }
}
